	package main

	import (
		"fmt"
		"math/rand"
		"net/http"
		"net/url"
		"strings"
		"time"

		"github.com/gin-contrib/cors"
		"github.com/gin-gonic/gin"
	)

	// Estruturas para requisi√ß√£o e resposta
	type ChatRequest struct {
		Message string `json:"message"`
	}

	type ChatResponse struct {
		Response     string   `json:"response"`
		Suggestions  []string `json:"suggestions,omitempty"`
		Action       string   `json:"action,omitempty"`
		WhatsAppLink string   `json:"whatsappLink,omitempty"`
		Link 	     string	  `json:"linkResponse"`
	}

	// Defini√ß√£o de respostas do chatbot
	var responses = map[string][]string{
		"default": {
			"Desculpe, n√£o entendi sua mensagem. Poderia ser mais espec√≠fico?",
			"N√£o consegui compreender. Voc√™ pode tentar reformular sua pergunta?",
			"Hum... n√£o consegui entender. Pode tentar novamente com outras palavras?",
			"Essa n√£o ficou clara para mim, poderia explicar melhor?",
		},
		"greeting": {
			"Ol√°! üëã Como posso ajudar voc√™ hoje?  Selecione o que precisa: 1Ô∏è‚É£ Servi√ßos 2Ô∏è‚É£ Pre√ßos 3Ô∏è‚É£ Falar com Especialista",
			"Oi! üòä Como posso te ajudar hoje? Estou √† disposi√ß√£o!  Escolha uma das op√ß√µes abaixo: 1Ô∏è‚É£ Servi√ßos 2Ô∏è‚É£ Pre√ßos 3Ô∏è‚É£ Falar com Especialista",
			"Ol√°! Que bom ver voc√™ por aqui! üëã Como posso ser √∫til? Escolha uma das op√ß√µes abaixo: 1Ô∏è‚É£ Servi√ßos 2Ô∏è‚É£ Pre√ßos 3Ô∏è‚É£ Falar com Especialista",
		},
		"services": {
			"Oferecemos: - Desenvolvimento de Sistemas üíª - UX/UI Design üé® - Consultoria Tecnol√≥gica üìä  O que deseja saber mais?",
			"Temos diversas solu√ß√µes para ajudar sua empresa a crescer! Oferecemos: - Desenvolvimento de Sistemas üíª - UX/UI Design üé® - Consultoria Tecnol√≥gica üìä  Sobre qual servi√ßo voc√™ gostaria de saber mais?",
			"Aqui est√£o os servi√ßos que oferecemos: - Desenvolvimento de Sistemas üíª - UX/UI Design üé® - Consultoria Tecnol√≥gica üìä  Me diga, sobre qual voc√™ quer mais detalhes?",
		},
		"pricing": {
			"Para informa√ß√µes sobre pre√ßos, entre em contato conosco para um or√ßamento personalizado!",
			"Os pre√ßos variam conforme o servi√ßo escolhido. Podemos discutir um or√ßamento personalizado para suas necessidades. Fique √† vontade para nos chamar!",
			"Podemos conversar sobre pre√ßos e encontrar a melhor solu√ß√£o para o que voc√™ precisa. Que tal solicitar um or√ßamento personalizado?",
		},
		"forwardToWhatsApp": {
			"Claro, clique no bot√£o verde",
		},
	}

	// Sugest√µes padr√£o para o chatbot
	var defaultSuggestions = []string{"1Ô∏è‚É£ Servi√ßos", "2Ô∏è‚É£ Pre√ßos", "3Ô∏è‚É£ Falar com Especialista"}

	// Processa a mensagem do usu√°rio e retorna uma resposta
	func processChatMessage(message string) ChatResponse {
		normalizedMessage := normalizeMessage(message)

		// Verifica por comandos diretos
		if response, _ := handleDirectCommand(normalizedMessage); response != nil {
			return *response
		}

		// Verifica por palavras-chave
		if response, _ := handleKeywords(normalizedMessage, message); response != nil {
			return *response
		}

		// Caso padr√£o
		return ChatResponse{
			Response:    getRandomResponse(responses["default"]),
			Suggestions: defaultSuggestions,
		}
	}

	// Normaliza a mensagem
	func normalizeMessage(message string) string {
		return strings.ToLower(strings.TrimSpace(message))
	}

	// Lida com comandos diretos como "1", "2", "3"
	func handleDirectCommand(normalizedMessage string) (*ChatResponse, string) {
		switch normalizedMessage {
		case "1":
			return &ChatResponse{Response: getRandomResponse(responses["services"])}, ""
		case "2":
			return &ChatResponse{Response: getRandomResponse(responses["pricing"])}, ""
		case "3":
			// Passando o n√∫mero de telefone correto e a mensagem est√°tica
			link := generateWhatsAppLink("5521966311677", "Quero falar com um especialista")
			//link := "https://wa.me/5521966311677?text=Ol%C3%A1,%20estou%20interessado%20nos%20seus%20servi%C3%A7os."
			return &ChatResponse{
				Response:     getRandomResponse(responses["forwardToWhatsApp"]),
				Action:       "forward_to_whatsapp",
				WhatsAppLink: link,
			}, "forward_to_whatsapp"
			
		}
		return nil, ""
	}

	// Lida com palavras-chave e frases comuns
	func handleKeywords(normalizedMessage, originalMessage string) (*ChatResponse, string) {
		switch {
		case strings.Contains(normalizedMessage, "oi") || strings.Contains(normalizedMessage, "ol√°"):
			return &ChatResponse{Response: getRandomResponse(responses["greeting"])}, ""
		case strings.Contains(normalizedMessage, "servi√ßos"):
			return &ChatResponse{Response: getRandomResponse(responses["services"])}, ""
		case strings.Contains(normalizedMessage, "pre√ßo") || strings.Contains(normalizedMessage, "valor"):
			return &ChatResponse{Response: getRandomResponse(responses["pricing"])}, ""
		case strings.Contains(normalizedMessage, "falar com especialista"):
			// Passando o n√∫mero de telefone correto e a mensagem original
			link := generateWhatsAppLink("5521966311677", originalMessage)
			//link := "https://wa.me/5521966311677?text=Ol%C3%A1,%20estou%20interessado%20nos%20seus%20servi%C3%A7os."
			return &ChatResponse{
				Response:     getRandomResponse(responses["forwardToWhatsApp"]),
				Action:       "forward_to_whatsapp",
				WhatsAppLink: link,
			}, "forward_to_whatsapp"
		}
		return nil, ""
	}

	// Retorna uma resposta aleat√≥ria da lista
	func getRandomResponse(options []string) string {
		return options[rand.Intn(len(options))]
	}

	// Gera um link do WhatsApp formatado corretamente e aceita n√∫mero de telefone e mensagem personalizada como par√¢metros
	func generateWhatsAppLink(phoneNumber, userMessage string) string {
		// Verifica se a mensagem do usu√°rio est√° vazia
		if userMessage == "" {
			userMessage = "Ol√°, gostaria de mais informa√ß√µes!"
		}

		// Cria a mensagem com a demanda do usu√°rio
		//message := fmt.Sprintf("Ol√°! Recebemos a seguinte demanda: \"%s\". Por favor, entre em contato.", userMessage)

		// Codifica a mensagem para garantir que os caracteres especiais sejam tratados
		encodedMessage := url.QueryEscape(userMessage) // Codifica a mensagem corretamente para URL

		// Retorna o link completo formatado para o WhatsApp
		return fmt.Sprintf("https://wa.me/%s?text=%s", phoneNumber, encodedMessage)
		

	}

	func main() {
		rand.Seed(time.Now().UnixNano()) // Inicializa a seed globalmente

		r := gin.Default()
		r.Use(cors.Default())
		r.Use(gin.Logger())   // Adiciona logs de requisi√ß√£o
		r.Use(gin.Recovery()) // Adiciona middleware para recupera√ß√£o de panics

		// Endpoint para a mensagem de boas-vindas
		r.GET("/welcome", func(c *gin.Context) {
			welcomeMessage := ChatResponse{
				Response:    getRandomResponse(responses["greeting"]),
				Suggestions: defaultSuggestions,
			}
			c.JSON(http.StatusOK, welcomeMessage)
		})

		// Endpoint para processar mensagens do chat
		r.POST("/chat", func(c *gin.Context) {
			var chatReq ChatRequest
			if err := c.ShouldBindJSON(&chatReq); err != nil {
				c.JSON(http.StatusBadRequest, gin.H{"response": "Por favor, envie uma mensagem v√°lida."})
				return
			}

			chatResp := processChatMessage(chatReq.Message)

			// Simula um delay para dar uma sensa√ß√£o de conversa mais natural
			time.Sleep(1 * time.Second)

			// Retorna a resposta ao usu√°rio
			c.JSON(http.StatusOK, chatResp)
		})

		port := "15000"
		fmt.Printf("Servidor rodando na porta %s...\n", port)
		if err := r.Run(":" + port); err != nil {
			fmt.Println("Erro ao iniciar o servidor:", err)
		}
	}
